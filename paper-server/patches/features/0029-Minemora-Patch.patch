From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tehin <62246450+Tehin@users.noreply.github.com>
Date: Wed, 2 Apr 2025 22:23:25 -0500
Subject: [PATCH] Minemora Patch


diff --git a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
index f473999938840562b1007a789600342e5796a123..29ed24a2518e97aff8c5c1f259b4d30226abaeca 100644
--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
@@ -67,6 +67,9 @@ public final class ChunkHolderManager {
     public static final int ENTITY_TICKING_TICKET_LEVEL = ChunkLevel.ENTITY_TICKING_LEVEL;
     public static final int MAX_TICKET_LEVEL = ChunkLevel.MAX_LEVEL; // inclusive
 
+    // MoraPaper - Limit chunk unloads per tick
+    private static final int MAX_CHUNK_UNLOADS_PER_TICK = 180;
+
     public static final TicketType UNLOAD_COOLDOWN = ChunkSystemTicketType.create("chunk_system:unload_cooldown", null, 5L * 20L);
 
     private static final long NO_TIMEOUT_MARKER = Long.MIN_VALUE;
@@ -1173,7 +1176,9 @@ public final class ChunkHolderManager {
         // We do need to process updates here so that any addTicket that is synchronised before this call does not go missed.
         this.processTicketUpdates();
 
-        final int toUnloadCount = Math.max(50, (int)(unloadCountTentative * 0.05));
+        // MoraPaper - Limit chunk unload to prevent RAM overuse
+        final int toUnloadCount = Math.max(50,Math.min(MAX_CHUNK_UNLOADS_PER_TICK, (int) (unloadCountTentative * 0.05)));
+
         int processedCount = 0;
 
         for (final ChunkUnloadQueue.SectionToUnload sectionRef : unloadSectionsForRegion) {
diff --git a/net/minecraft/network/chat/OutgoingChatMessage.java b/net/minecraft/network/chat/OutgoingChatMessage.java
index 4635182c73f28f63ba84982cb6bcb422221b738e..eb40e9b8051c7e159146104383a747d1c3c26566 100644
--- a/net/minecraft/network/chat/OutgoingChatMessage.java
+++ b/net/minecraft/network/chat/OutgoingChatMessage.java
@@ -26,6 +26,9 @@ public interface OutgoingChatMessage {
             this.sendToPlayer(player, filtered, boundType, null);
         }
         public void sendToPlayer(ServerPlayer player, boolean filtered, ChatType.Bound boundType, @javax.annotation.Nullable Component unsigned) {
+            // MoraPaper
+            if (player.chatDisabled) return;
+
             player.connection.sendDisguisedChatMessage(unsigned != null ? unsigned : this.content, boundType);
             // Paper end
         }
@@ -43,6 +46,9 @@ public interface OutgoingChatMessage {
             this.sendToPlayer(player, filtered, boundType, null);
         }
         public void sendToPlayer(ServerPlayer player, boolean filtered, ChatType.Bound boundType, @javax.annotation.Nullable Component unsigned) {
+            // MoraPaper
+            if (player.chatDisabled) return;
+
             // Paper end
             PlayerChatMessage playerChatMessage = this.message.filter(filtered);
             playerChatMessage = unsigned != null ? playerChatMessage.withUnsignedContent(unsigned) : playerChatMessage; // Paper
diff --git a/net/minecraft/server/level/ChunkMap.java b/net/minecraft/server/level/ChunkMap.java
index 0d8aefe8c886eaa4c33cbab53b0ad1c016f0531f..05c0d2b308b43b8b50eb126509607df3394f561e 100644
--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -1176,11 +1176,16 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
 
             if (lastChunkUpdate != currChunkUpdate || lastTrackedChunk != chunk) {
+                // MoraPaper - Iterate in the set itself not by creating a completely new arraylist
+                final java.util.Iterator<net.minecraft.server.network.ServerPlayerConnection> seenByIterator = this.seenBy.iterator();
+
                 // need to purge any players possible not in the chunk list
-                for (final ServerPlayerConnection conn : new java.util.ArrayList<>(this.seenBy)) {
+                while (seenByIterator.hasNext()) {
+                    final ServerPlayerConnection conn = seenByIterator.next();
                     final ServerPlayer player = conn.getPlayer();
                     if (!players.contains(player)) {
-                        this.removePlayer(player);
+                        seenByIterator.remove();
+                        this.forceRemovePlayerPairing(player);
                     }
                 }
             }
@@ -1278,6 +1283,12 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
+        // MoraSpigot - Remove the player without removing or checking for the seenBy, to prevent CME
+        // when the player is removed while in a loop
+        public void forceRemovePlayerPairing(ServerPlayer player) {
+            this.serverEntity.removePairing(player);
+        }
+
         public void updatePlayer(ServerPlayer player) {
             org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
             if (player != this.entity) {
diff --git a/net/minecraft/server/level/ServerChunkCache.java b/net/minecraft/server/level/ServerChunkCache.java
index 59e8a5e1b35c81883c9b1ca00c6e55d77584d8cc..7fcacaf184fe9a4e299fa82a4cb1bd57570e0dea 100644
--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -619,12 +619,21 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
         }
 
         if (!spawnCategories.isEmpty()) {
-            if (this.level.getWorldBorder().isWithinBounds(pos)) { // Paper - rewrite chunk system
+            if (this.level.getWorldBorder().isWithinBounds(pos) && !isInNoNaturalSpawnRadius(pos)) { // Paper - rewrite chunk system
                 NaturalSpawner.spawnForChunk(this.level, chunk, spawnState, spawnCategories);
             }
         }
     }
 
+    // MoraPaper Start - Limit natural spawn radius
+    private boolean isInNoNaturalSpawnRadius(ChunkPos pos) {
+        int radius = 10; //TODO from config
+        int x = pos.x;
+        int z = pos.z;
+        return x >= -radius && x < radius && z >= -radius && z < radius;
+    }
+    // MoraPaper End
+
     private void getFullChunk(long chunkPos, Consumer<LevelChunk> fullChunkGetter) {
         // Paper start - rewrite chunk system
         // note: bypass currentlyLoaded from getChunkNow
diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 6457f41fe7882d8c532e16851400c37a67e8cd52..2b869da876c89a934541663b8cda775e14d6d99e 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -2165,7 +2165,12 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         this.sendSystemMessage(mesage, false);
     }
 
+    // MoraPaper - Completely disable chat
+    public boolean chatDisabled = false;
+
     public void sendSystemMessage(Component message, boolean overlay) {
+        if (chatDisabled) return;
+
         if (this.acceptsSystemMessages(overlay)) {
             this.connection
                 .send(
@@ -2193,6 +2198,9 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         this.sendChatMessage(message, filtered, boundType, null);
     }
     public void sendChatMessage(OutgoingChatMessage message, boolean filtered, ChatType.Bound boundType, @Nullable Component unsigned) {
+        // MoraPaper
+        if (chatDisabled) return;
+
         // Paper end
         if (this.acceptsChatMessages()) {
             message.sendToPlayer(this, filtered, boundType, unsigned); // Paper
diff --git a/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 5e921c490814be31fc2843327c0e2cc76bda6620..dcd94778b207b3283034ae24f89612f8d5f73e98 100644
--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -2588,6 +2588,10 @@ public class ServerGamePacketListenerImpl
             return;
         }
         // CraftBukkit end
+
+        // MoraPaper
+        if (player.chatDisabled) return;
+
         // Paper start - Ensure that client receives chat packets in the same order that we add into the message signature cache
         synchronized (this.messageSignatureCache) {
         this.send(
diff --git a/net/minecraft/world/entity/ai/goal/GoalSelector.java b/net/minecraft/world/entity/ai/goal/GoalSelector.java
index a927c2790c8ab9ccaa7161b970e10b0b44817dd8..22d369538f27d055d2adee72536869ee2804adf0 100644
--- a/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -40,7 +40,7 @@ public class GoalSelector {
     // Paper start - EAR 2
     public boolean inactiveTick() {
         this.curRate++;
-        return this.curRate % 3 == 0; // TODO newGoalRate was already unused in 1.20.4, check if this is correct
+        return this.curRate % 40 == 0; // MoraPaper - Increase curRate from 3 to 40
     }
 
     public boolean hasTasks() {
